# vim: set ft=sh:
# This script sets coog administration environment

DOCKER_MAJOR_VERSION=1
DOCKER_MINOR_VERSION=11

check_docker_version() {
        local version
        version=$(docker version --format '{{.Server.Version}}')
        [ $? -ne 0 ] && echo check docker installation && return 1
        [ -z "$version" ] && echo can not retrieve docker version && return 1
        local major_version; major_version=$(echo "$version" | cut -d '.' -f 1)
        local minor_version; minor_version=$(echo "$version" | cut -d '.' -f 2)
        [ "$major_version" -lt "$DOCKER_MAJOR_VERSION" ] && echo docker major version should be = $DOCKER_MAJOR_VERSION && return 1
        [ "$minor_version" -lt "$DOCKER_MINOR_VERSION" ] && echo docker minor version should be at least $DOCKER_MINOR_VERSION && return 1
        return 0
}

check_docker_version || exit 1

get_dir() {
        local script_path; script_path=$(readlink -f "$0")
        local script_dir; script_dir=$(dirname "$script_path")
        echo "$script_dir"
}

ip() {
        local exists
        exists=$(docker ps --format '{{.Names}}' | grep -cP ^"$1"\$)
        [ "$exists" -eq 0 ] && return 1
        docker inspect --format '{{.NetworkSettings.IPAddress}}' "$1"
}

#-------------------------------------------------------------------------------#
# GENERAL PURPOSE
#-------------------------------------------------------------------------------#

[ -z "$EDITOR" ] && EDITOR=nano
PREFIX=/usr/local/coog                        # where all custom data goes
[ ! -z "$COOG_DATA" ] && PREFIX="$COOG_DATA"  # can be set via $COOG_DATA
mkdir -p "$PREFIX"                            # make sure folder exists

NETWORK_NAME=$USER
[ -z "$DOCKER_DAEMON_OPTS" ] && DOCKER_DAEMON_OPTS="-d"
[ -z "$DOCKER_PIPED_OPTS" ] && DOCKER_PIPED_OPTS="--rm"
[ -z "$DOCKER_INTERACTIVE_OPTS" ] && DOCKER_INTERACTIVE_OPTS="-it --rm"

#-------------------------------------------------------------------------------#
# POSTGRES CONFIG
#-------------------------------------------------------------------------------#

POSTGRES_IMAGE=postgres:9.5-alpine      # docker image
POSTGRES_VOLUME=$PREFIX/postgres        # docker data volume

POSTGRES_USER=postgres                  # postgres user
POSTGRES_PASSWORD=postgres              # postgres password

SENTRY_DB_USER=$POSTGRES_USER           # sentry db user
SENTRY_DB_PASSWORD=$POSTGRES_PASSWORD   # sentry db password
SENTRY_DB_NAME=sentry                   # sentry db db name

#-------------------------------------------------------------------------------#
# REDIS CONFIG
#-------------------------------------------------------------------------------#

REDIS_IMAGE=redis:3.2-alpine            # docker image
REDIS_VOLUME=$PREFIX/redis              # docker data volume

COOG_CACHE_DB=0                         # coog cache db name
COOG_CELERY_DB=1                        # coog celery db name
COOG_RQ_DB=2                            # coog rq db name
SENTRY_REDIS_DB=5                       # sentry db name

#-------------------------------------------------------------------------------#
# UNOCONV CONFIG
#-------------------------------------------------------------------------------#

UNOCONV_IMAGE=coog/unoconv              # docker image
UNOCONV_CONTAINER=$USER-unoconv         # docker container

#-------------------------------------------------------------------------------#
# SENTRY CONFIG
#-------------------------------------------------------------------------------#

SENTRY_IMAGE=sentry:8                   # docker image
SENTRY_VOLUME=$PREFIX/sentry            # docker data volume
SENTRY_KEY=$PREFIX/sentry.key           # containers shared key

SENTRY_POSTGRES_HOST=                   # defaults to postgres container
SENTRY_POSTGRES_PORT=                   # defaults to postgres container

SENTRY_REDIS_HOST=                      # defaults to redis container
SENTRY_REDIS_PORT=                      # defaults to redis container

#-------------------------------------------------------------------------------#
# COOG CONFIG
#-------------------------------------------------------------------------------#

COOG_IMAGE=coog/coog:coog-1.10          # docker image
COOG_VOLUME=$PREFIX/coog                # docker data volume

COOG_POSTGRES_HOST=                     # defaults to postgres container
COOG_POSTGRES_PORT=                     # defaults to postgres container

COOG_DB_USER=$POSTGRES_USER             # coog pg user
COOG_DB_PASSWORD=$POSTGRES_PASSWORD     # coog pg password
COOG_DB_NAME=coog                       # coog pg db name

COOG_REDIS_HOST=                        # defaults to redis container
COOG_REDIS_PORT=                        # defaults to redis container

COOG_UNOCONV_HOST=                      # defaults to unoconv container
COOG_UNOCONV_PORT=                      # defaults to unoconv container

COOG_SENTRY_PROTOCOL=                   # defaults to http
COOG_SENTRY_HOST=                       # defaults to sentry container
COOG_SENTRY_PORT=                       # defaults to sentry container
COOG_SENTRY_PUB=
COOG_SENTRY_SEC=
COOG_SENTRY_PROJECT=

COOG_SESSION_SUPERPWD=super             # coog super password (not a user)
COOG_DB_LANG=fr_FR                      # database locale - eg. fr_FR
COOG_CACHE_MODEL=                       # models cache size
COOG_CACHE_RECORD=                      # records cache size
COOG_CACHE_FIELD=                       # fields cache size
COOG_CACHE_COOG=                        # coog cache size

COOG_LOG_LEVEL=                         # python levels
COOG_ADMIN_EMAIL=example@coopengo.com   # application admin email address

#-------------------------------------------------------------------------------#
# NGINX CONFIG
#-------------------------------------------------------------------------------#

NGINX_IMAGE=nginx:1-alpine              # docker image
NGINX_CONF=$PREFIX/nginx.conf           # nginx conf path
NGINX_PUB_PORT=80                       # host mapped port

#-------------------------------------------------------------------------------#
# CUSTOMS
#-------------------------------------------------------------------------------#

[ ! -e "$PREFIX/config" ] &&
        cp "$(get_dir)/defaults/config" "$PREFIX/config" &&
        echo "# For an exhaustive variables list, checkout base config on $(get_dir)/config" >> "$PREFIX/config"
[ ! -e "$PREFIX/config" ] && exit 1
source "$PREFIX/config"
