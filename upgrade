#!/bin/bash

if [ -z "$COOG_CODE_DIR" ] || [ ! -d "$COOG_CODE_DIR" ] || [ -z "$COOG_DATA_DIR" ]
then
    {
        echo "Please make sure that these two env vars are set:"
        echo "  COOG_CODE_DIR: your coog-admin install folder"
        echo "  COOG_DATA_DIR: the folder where to keep your custom config"
    } >&2 && exit 1
fi

OPTIND=1
COOG_IMAGE_TAG="-"
COOG_IMAGE_ARCHIVE="-"
COOG_IMAGE_REPO="-"
COOG_DB_BACKUP=n
COOG_DB_UPDATE=n

docker_image() {
    [ -z "$1" ] && return 1
    docker images --format '{{.Repository}}:{{.Tag}}' --filter "reference=$1"
}

docker_last_image() {
    docker images --format '{{.Repository}}:{{.Tag}}' | head -1
}

docker_container() {
    [ -z "$1" ] && return 1
    docker ps --format '{{.Names}}' --filter "name=$NETWORK_NAME-$1"
}

cache_clear() {
    [ ! -z "$COOG_CACHE_DB" ] && "$COOG_CODE_DIR/redis" client -n "$COOG_CACHE_DB" FLUSHDB
}

database_backup() {
    local file_name
    file_name="coog-$USER-$COOG_DB_NAME-$(date +'%y%m%d-%H%M%S').dmp"
    "$COOG_CODE_DIR/postgres" dump -F c > "/tmp/$file_name"
}

database_update() {
    "$COOG_CODE_DIR/coog" admin -u ir "$@"
}

print_help() {
    echo "This command upgrades Coog installation"
    echo
    echo "Command options:"
    echo "  -t <image-tag>"
    echo "  -a <image-archive>"
    echo "  -p <image-repository>"
    echo "  -s <server-workers-number>"
    echo "  -c <celery-workers-number>"
    echo "  -b : backup database"
    echo "  -u : update database"
    echo "  -h : print this help"
    echo
    echo "Extra parameters will be forwarded to the database update command"
}

while getopts "t:a:p:s:c:buh" opt
do
    case "$opt" in
        t) COOG_IMAGE_TAG="$OPTARG"
            ;;
        p) COOG_IMAGE_REPO="$OPTARG"
            ;;
        a) COOG_IMAGE_ARCHIVE="$OPTARG"
            ;;
        b) COOG_DB_BACKUP=y
            ;;
        u) COOG_DB_UPDATE=y
            ;;
        h) print_help && exit 0
            ;;
    esac
done
shift $((OPTIND-1))

[ "$COOG_IMAGE_ARCHIVE" != "-" ] && [ "$COOG_IMAGE_REPO" != "-" ] && \
    echo "Archive (-a) and repository (-p) parameters are mutually exclusive" && exit 1

main() {
    source "$COOG_CODE_DIR/config"
    [ ! -z "$DB_NAME" ] && COOG_DB_NAME="$DB_NAME"
    if [ "$COOG_IMAGE_ARCHIVE" != "-" ]
    then
        echo
        echo "loading image from $COOG_IMAGE_ARCHIVE"
        docker load -i "$COOG_IMAGE_ARCHIVE" || return $?
        COOG_IMAGE_TAG="$(docker_last_image)"
    fi
    if [ "$COOG_IMAGE_REPO" != "-" ]
    then
        echo
        echo "pulling image from $COOG_IMAGE_REPO"
        docker pull "$COOG_IMAGE_REPO" || return $?
        COOG_IMAGE_TAG="$COOG_IMAGE_REPO"
    fi
    if [ "$COOG_IMAGE_TAG" != "-" ]
    then
        local img
        img=$(docker_image "$COOG_IMAGE_TAG")
        echo
        if [ ! -z "$img" ]
        then
            echo "adding $COOG_IMAGE_TAG image to config"
            ( cd "$COOG_DATA_DIR" \
                && echo "COOG_IMAGE=$COOG_IMAGE_TAG" >> config \
                && git add config \
                && config_data_commit -m "update config (upgrade)" )
            [ $? -ne 0 ] \
                && echo "can not set new image tag" >&2 \
                && return 1
        else
            echo "$COOG_IMAGE_TAG image not found"
            return 1
        fi
    fi

    local paybox_container
    paybox_container=$(docker_container paybox)
    echo
    if [ ! -z "$paybox_container" ]
    then
        echo "removing paybox container"
        "$COOG_CODE_DIR/paybox" rm -f
    else
        echo "no paybox container running"
    fi

    local nginx_container
    nginx_container=$(docker_container nginx)
    echo
    if [ ! -z "$nginx_container" ]
    then
        echo "removing nginx container"
        "$COOG_CODE_DIR/nginx" rm -f
    else
        echo "no nginx container running"
    fi

    local web_container
    web_container=$(docker_container web)
    echo
    if [ ! -z "$web_container" ]
    then
        echo "removing web container"
        "$COOG_CODE_DIR/web" rm -f
    else
        echo "no web container running"
    fi

    local server_container
    server_container=$(docker_container coog-server)
    echo
    if [ ! -z "$server_container" ]
    then
        echo "removing server container"
        "$COOG_CODE_DIR/coog" -- server rm -f
    else
        echo "no server container running"
    fi

    local celery_container
    celery_container=$(docker_container coog-celery)
    echo
    if [ ! -z "$celery_container" ]
    then
        echo "removing celery container"
        "$COOG_CODE_DIR/coog" -- celery rm -f
    else
        echo "no celery container running"
    fi

    echo
    echo "clearing cache" && { cache_clear || return $?; }
    if [ "$COOG_DB_BACKUP" = y ]
    then
        echo "backup database $COOG_DB_NAME" && { database_backup || return $?; }
    fi
    if [ "$COOG_DB_UPDATE" = y ]
    then
        echo "updating database $COOG_DB_NAME" && { database_update "$@" || return $?; }
        echo "clearing cache" && { cache_clear || return $?; }
    fi

    if [ ! -z "$celery_container" ]
    then
        echo
        echo "starting celery container"
        "$COOG_CODE_DIR/coog" celery
    fi

    if [ ! -z "$server_container" ]
    then
        echo
        echo "starting server container"
        "$COOG_CODE_DIR/coog" server
    fi

    if [ ! -z "$web_container" ]
    then
        echo
        echo "starting web container"
        "$COOG_CODE_DIR/web" run
    fi

    if [ ! -z "$nginx_container" ]
    then
        echo
        echo "starting nginx container"
        "$COOG_CODE_DIR/nginx" run
    fi

    if [ ! -z "$paybox_container" ]
    then
        echo
        echo "starting paybox container"
        "$COOG_CODE_DIR/paybox" run
    fi
}

echo "This command is about to **upgrade** your Coog installation!"
echo "Please make sure this is what you want to do and check parameters below before confirming"
echo
echo "- Image tag: $COOG_IMAGE_TAG (-t)"
echo "- Image archive: $COOG_IMAGE_ARCHIVE (-a)"
echo "- Image repository: $COOG_IMAGE_REPO (-p)"
echo "- Backup database: $COOG_DB_BACKUP (-b)"
echo "- Update database: $COOG_DB_UPDATE (-u)"
echo

read -p "Confirm upgrading? [y/N] " choice
case "$choice" in
    y|Y) main "$@"
        ;;
    n|N) echo "leaving" && exit 1
        ;;
    *) echo "leaving" && exit 1
        ;;
esac
