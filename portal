#!/bin/bash

if [ -z "$COOG_CODE_DIR" ] || [ ! -d "$COOG_CODE_DIR" ] || [ -z "$COOG_DATA_DIR" ]
then
    {
        echo "Please make sure that these two env vars are set:"
        echo "  COOG_CODE_DIR: your coog-admin install folder"
        echo "  COOG_DATA_DIR: the folder where to keep your custom config"
    } >&2 && exit 1
fi

_export_conf_docker() {
    echo "Export shared env"
    export NETWORK_NAME COOG_DB_NAME

    export COOG_URL COOG_DB_NAME

    if [ ! -z "$CUSTOMER" ]
    then
        echo $CUSTOMER
        export CUSTOMER="-$CUSTOMER"
    fi

    export JWT_INTERNAL_ENCRYPTION

    echo "Export portal envs"
    export PORTAL_VERSION 
    export APP_B2C_VERSION 
    
    echo "Export api envs"
    export API_VERSION API_WEB_TOKEN API_B2C_VERSION API_B2B_CONFIG_VERSION \
        API_MONGO_DB_NAME COOG_DOCUMENT_TOKEN_SECRET API_REFERENTIAL_VERSION \
        API_IDENTITY_VERSION 
    
    echo "Export gateway envs" 
    export GATEWAY_VERSION GATEWAY_WHITELIST COOG_PORTAL_URL JWT_ENCRYPTION \
        JWT_EXPIRATION GATEWAY_WEB_TOKEN GATEWAY_MONGO_DB_NAME COOG_GATEWAY_URL

    if [ -z "$COOG_GATEWAY_BASE_PATH" ]
    then
        export COOG_GATEWAY_BASE_PATH=""
    else
        export COOG_GATEWAY_BASE_PATH
    fi

    if [ -z "$COOG_API_URL" ]
    then
        export COOG_API_URL="http://${NETWORK_NAME}-web:3000"
    else
        export COOG_API_URL
    fi

    if [ -z "$COOG_API_URL_V2" ]
    then
        export COOG_API_URL_V2="http://${NETWORK_NAME}-api:3000"
    else
        export COOG_API_URL_V2
    fi

    if [ -z "$COOG_API_B2C_URL" ]
    then
        export COOG_API_B2C_URL="http://${NETWORK_NAME}-api-b2c:3000"
    else
        export COOG_API_B2C_URL
    fi

    if [ -z "$COOG_API_IDENTITY_MANAGER_URL" ]
    then
        export COOG_API_IDENTITY_MANAGER_URL="http://${NETWORK_NAME}-api-identity-manager:3000"
    else
        export COOG_API_IDENTITY_MANAGER_URL
    fi

    if [ -z "$COOG_API_B2B_CONFIG_URL" ]
    then
        export COOG_API_B2B_CONFIG_URL="http://${NETWORK_NAME}-api-b2b-config:3000"
    else
        export COOG_API_B2B_CONFIG_URL
    fi

    if [ -z "$COOG_API_REFERENTIAL_URL" ]
    then
        export COOG_API_REFERENTIAL_URL="http://${NETWORK_NAME}-api-referential:3000"
    else
        export COOG_API_REFERENTIAL_URL
    fi

    if [ -z "$API_IDENTITY_MONGO_DB_NAME" ]
    then
        export API_IDENTITY_MONGO_DB_NAME=coog-identity-manager
    fi

    if [ -z "$API_MONGO_DB_NAME" ]
    then
        export API_MONGO_DB_NAME=coog-api-v2
    fi

    if [ -z "$GATEWAY_MONGO_DB_NAME" ]
    then
        export GATEWAY_MONGO_DB_NAME=coog-gateway
    fi

    echo "Export gateway authentication activation"
    export COOG_MODULE

    echo "Export mongo envs"
    export MONGO_IMAGE MONGO_USER MONGO_PASSWORD MONGO_PORT 
}

_build_conf_docker() {
    echo "set version of images"

    if [ ! -z "$CUSTOMER" ]
    then
        echo $CUSTOMER
        export CUSTOMER="-$CUSTOMER"
    fi

    export PORTAL_VERSION="$1"
    export APP_B2C_VERSION="$1"
    export API_VERSION="$1"
    export API_REFERENTIAL_VERSION="$1"
    export API_IDENTITY_VERSION="$1"
    export API_B2C_VERSION="$1"
    export API_B2B_CONFIG_VERSION="$1"
    export GATEWAY_VERSION="$1"
    export REACT_APP_PROD_API_URL REACT_APP_PORTAL_URL
    export MONGO_IMAGE NETWORK_NAME
}

_build() {
    _build_conf_docker "$@"
    cd "$COOG_CODE_DIR/images/portal" && ./build "$@"
}

_up() {
    _export_conf_docker
    cd images/portal
    docker-compose -p "$NETWORK_NAME-portal" up -d "$@"
}

_restart() {
    _export_conf_docker
    cd images/portal
    docker-compose -p "$NETWORK_NAME-portal" restart "$@"
}

_down() {
    _export_conf_docker
    cd images/portal
    docker-compose -p "$NETWORK_NAME-portal" down "$@"
}

########
# main #
########

usage() {
    echo
    echo Admin commands
    echo
    echo "  build                -> build portal image: <tag> <repo:branch>+"
    echo "  down                 -> shut down all container"
    echo "  down api gateway ... -> shut down relative container"
    echo "  up                   -> running all container"
    echo "  up api gateway ...   -> running relative container"
    return 0
}

main() {
    source "$COOG_CODE_DIR/config"
    [ -z "$1" ] && usage && return 0
    local cmd; cmd="$1"; shift
    [ "$cmd" = "build" ] && { (_build "$@"); return $?; }
    [ "$cmd" = "down" ] && { (_down "$@"); return $?; }
    [ "$cmd" = "up" ] && { (_up "$@"); return $?; }
    [ "$cmd" = "restart" ] && { (_restart "$@"); return $?; }
    usage
}

main "$@"
