#!/bin/bash
# docker entrypoint

COOG_ROOT=/workspace
COOG_BIN=$COOG_ROOT/coog/bin/bin
COOG_LIB=$COOG_ROOT/coog/bin/lib
COOG_TRYTOND=$COOG_ROOT/trytond
COOG_PROTEUS=$COOG_ROOT/proteus
COOG_CONF_SRV=$COOG_ROOT/coog.conf
COOG_CONF_BAT=$COOG_ROOT/batch.conf
COOG_IO=$COOG_ROOT/io

##################
# init container #
##################

_init_env() {
    export PYTHONUNBUFFERED=1
    export PYTHONPATH="$COOG_LIB:$COOG_TRYTOND:$PYTHONPATH"
    [ -d "$COOG_PROTEUS" ] && export PYTHONPATH="$COOG_PROTEUS:$PYTHONPATH"
    [ -z "$LOG_LEVEL" ] && LOG_LEVEL=ERROR
    export DB_NAME="$COOG_DB_NAME"
    export LOG_LEVEL
    # Nowaday we need files to be physically created even if it is empty.
    # (i.e: see coog-daily script)
    # TODO: Remove totally depency to these files
    echo "" > $COOG_CONF_SRV
    echo "" > $COOG_CONF_BAT
    return 0
}

_init() {
    _init_env
}

###############
# entrypoints #
###############

_link() {
    . "$COOG_ROOT/coog/bin/coog-repo"
    coog_repo_linkm
}

_print_version() {
    cat "$COOG_ROOT/.version"
}

_print_anon_queries() {
    . "$COOG_ROOT/coog/bin/coog-db"
    _get_anon_queries $@
}

_print_env() {
    _init || return $?
    echo
    printenv
}

_modules() {
    . "$COOG_ROOT/coog/bin/coog-module"
    PGHOST="$COOG_POSTGRES_HOST" \
        PGPASSWORD="$COOG_DB_PASSWORD" \
        PGUSER="$COOG_DB_USER" \
        PGDATABASE="$COOG_DB_NAME" coog_module_main "$@"
}

_admin() {
    _init || return $?
    trytond-admin -v "$@"
}

_cron() {
    _init || return $?
    trytond-cron "$@"
}

_server() {
    local n; n="$1"
    [ -z "$n" ] && n="$COOG_SERVER_WORKERS"
    [ -z "$n" ] && echo "missing concurrency" && return 1
    [ -z "$COOG_TIMEOUT" ] && COOG_TIMEOUT=600

    echo Welcome on board, Coog Server is preparing to start
    _init || return $?
    local format; format="%(wid) %(ltime) %(rpc) %(status) %(rsize)B %(msecs)ms"
    [ ! -z "$WSGI_LOG_FILE" ] && export WSGI_LOG_FILE
    COOG_IWC=1
    export COOG_IWC
    uwsgi -T \
        --plugins python3 \
        --module trytond.application:app \
        --logformat "$format" \
        --http-socket :8000 \
        --harakiri "$COOG_TIMEOUT" \
        --processes "$n"
}

_celery() {
    local n; n="$1"
    if [ ! -z "$n" ] && [ "$n" -eq "$n" ]
    then
        shift
    else
        n="$COOG_CELERY_WORKERS"
        [ -z "$n" ] && echo "missing concurrency" && return 1
    fi
    echo Welcome on board, Coog Celery is preparing to start
    _init || return $?
    local q
    if [ ! -z "$1" ]
    then
        q="$*"
    else
        q="$(python -W ignore $COOG_BIN/load_batches.py | tr '\n' ',' 2> /dev/null)"
        q+=",api_offloading"
    fi
    celery worker \
        --app=coog_async.broker_celery \
        --loglevel="$LOG_LEVEL" \
        --concurrency="$n" \
        --queues="$q"
}

_celery_single() {
    echo Welcome on board, Coog Celery is preparing to start
    _init || return $?
    python -W ignore $COOG_BIN/load_batches.py --run_specific
}

_demo() {
    _init || return $?
    PATH="$COOG_ROOT/coog/bin:$PATH" \
        PYTHONPATH="$COOG_ROOT/trytond:$COOG_ROOT/proteus:$COOG_ROOT/coog/bin/lib:$PYTHONPATH" \
        PGHOST="$COOG_POSTGRES_HOST" \
        PGPASSWORD="$COOG_DB_PASSWORD" \
        PGUSER="$COOG_DB_USER" \
        TRYTOND_CONFIG="$COOG_ROOT/coog.conf" \
        GEN_RESTART_SERVER=0 \
        GEN_CREATE_NEW_DB=1 \
        GEN_DB_NAME=demo \
        GEN_COOG_BINARY="$COOG_ROOT/coog/bin/coog" \
        python "$COOG_ROOT/coog/modules/global_tests/tests/new_db.py"
}

_batch() {
    [ -z "$1" ] && echo "missing batch name" && return 1
    _init || return $?
    . "$COOG_ROOT/coog/bin/coog-redis"
    . "$COOG_ROOT/coog/bin/coog-celery"
    . "$COOG_ROOT/coog/bin/coog-batch"
    coog_batch_exec "$@"
}

_batch_info() {
    [ -z "$1" ] && echo "missing batch name" && return 1
    _init || return $?
    . "$COOG_ROOT/coog/bin/coog-redis"
    . "$COOG_ROOT/coog/bin/coog-celery"
    . "$COOG_ROOT/coog/bin/coog-batch"
    coog_batch_info "$@"
}

_chain() {
    [ "$#" -lt 2 ] && echo "missing arguments" && return 1
    _init || return $?
    . "$COOG_ROOT/coog/bin/coog-redis"
    . "$COOG_ROOT/coog/bin/coog-celery"
    . "$COOG_ROOT/coog/bin/coog-batch"
    . "$COOG_ROOT/coog/bin/coog-chain"
    [ "$1" = "--" ] && shift 1
    coog_chain_main "$@"
}

_redis() {
    [ -z "$1" ] && echo "missing redis context" && return 1
    _init || return $?
    . "$COOG_ROOT/coog/bin/coog-redis"
    coog_redis_eval "$@"
}

_daily() {
    _init || return $?
    . "$COOG_ROOT/coog/bin/coog-redis"
    . "$COOG_ROOT/coog/bin/coog-celery"
    . "$COOG_ROOT/coog/bin/coog-batch"
    . "$COOG_ROOT/coog/bin/coog-chain"
    . "$COOG_ROOT/coog/bin/coog-module"
    . "$COOG_ROOT/coog/bin/coog-daily"
    PGHOST="$COOG_POSTGRES_HOST" \
        PGPASSWORD="$COOG_DB_PASSWORD" \
        PGUSER="$COOG_DB_USER" \
        PGDATABASE="$COOG_DB_NAME" coog_daily_main "$@"
}

########
# main #
########

usage() {
    echo
    echo Image commands
    echo
    echo "  version       -> gets image version (git trees)"
    echo "  env           -> gets container env vars"
    echo "  module        -> gets list of installed modules"
    echo "  admin         -> launch admin utils - <args>"
    echo "  server        -> starts coog server - <workers nb>"
    echo "  celery        -> starts celery workers - <workers nb> <queue,+>"
    echo "  celery_single -> starts specific celery workers with one worker"
    echo "  batch         -> executes batch - <name> [args *]"
    echo "  batch_info    -> append batch info in report "
    echo "  chain         -> executes batch chain - <module> <chain> [args *]"
    echo "  redis         -> executes redis script - <context> [args *]"
    echo "  daily         -> executes daily_chains.sh - <work days> <work days conf> <extract output>"
    echo "  cron          -> execute coog-cron"
    echo "  shell         -> runs the arguments as a script (ex: shell bash for a shell in the container)"
    echo
}

main() {
    [ -z "$1" ] && usage && return 1
    local cmd; cmd="$1"; shift
    #
    [ "$cmd" = link ] && { _link; return $?; }
    [ "$cmd" = version ] && { _print_version; return $?; }
    [ "$cmd" = env ] && { _print_env; return $?; }
    [ "$cmd" = module ] && { _modules "$@"; return $?; }
    [ "$cmd" = admin ] && { _admin "$@"; return $?; }
    [ "$cmd" = server ] && { _server "$@"; return $?; }
    [ "$cmd" = celery ] && { _celery "$@"; return $?; }
    [ "$cmd" = celery_single ] && { _celery_single "$@"; return $?; }
    [ "$cmd" = batch ] && { _batch "$@"; return $?; }
    [ "$cmd" = batch_info ] && { _batch_info "$@"; return $?; }
    [ "$cmd" = chain ] && { _chain "$@"; return $?; }
    [ "$cmd" = redis ] && { _redis "$@"; return $?; }
    [ "$cmd" = daily ] && { _daily "$@"; return $?; }
    [ "$cmd" = cron ] && { _cron "$@"; return $?; }
    [ "$cmd" = anon_queries ] && { _print_anon_queries "$@"; return $?; }
    [ "$cmd" = demo ] && { _demo "$@"; return $?; }
    [ "$cmd" = shell ] && { "$@"; return $?; }
    echo "Not supported command" && usage &&  return 1
}

main "$@"
