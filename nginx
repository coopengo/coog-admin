#!/bin/bash

if [ -z "$COOG_CODE_DIR" ] || [ -z "$COOG_DATA_DIR" ]
then
    echo "COOG_CODE_DIR or COOG_DATA_DIR not set" >&2 && exit 1
fi

_edit_ls() {
    echo
    ( cd "$COOG_DATA_DIR/nginx" && find . -type f | cut -c 3- )
}

_edit_commit() {
    config_data_path_changed "nginx*" \
        && git add nginx* \
        && config_data_commit -m "update nginx - $1"
}

_edit() {
    [ -z "$1" ] && echo "choose file to edit:" \
        && _edit_ls \
        && return 1
    local f; f="$COOG_DATA_DIR/nginx/$1"
    [ ! -f "$f" ] \
        && echo "bad file name, choose within:" \
        && _edit_ls \
        && return 1
    "$EDITOR" "$COOG_DATA_DIR/nginx/$1"
    ( cd "$COOG_DATA_DIR" && _edit_commit "$1" )
}

_ssl() {
    [ ! -z "$NGINX_SSL_METHOD" ] && source "$COOG_CODE_DIR/ssl/$NGINX_SSL_METHOD/init"
    [ ! -z "$NGINX_SSL_METHOD" ] && prepare_ssl
}

_check() {
    local n; n=$(cat "$COOG_DATA_DIR/nginx/"*web.conf | wc -l)
    [ -z "$WEB_IMAGE" ] \
        && [ "$n" -ne 0 ] \
        && echo "nginx and web configuration are not compliant (nginx y, web: n) - ./nginx reset to solve" \
        && return 1
    [ ! -z "$WEB_IMAGE" ] \
        && [ "$n" -eq 0 ] \
        && echo "nginx and web configuration are not compliant (nginx n, web: y) - ./nginx reset to solve" \
        && return 1
    return 0
}

run() {
    _check || return $?
    local volumes
    [ ! -z "$COOG_IMAGE" ] \
        && volumes="$volumes --volumes-from $NETWORK_NAME-coog-server"
    [ ! -z "$WEB_IMAGE" ] \
        && volumes="$volumes --volumes-from $NETWORK_NAME-web"
    [ ! -z "$NGINX_SSL_METHOD" ] \
        && source "$COOG_CODE_DIR/ssl/$NGINX_SSL_METHOD/init" \
        && volumes="$volumes $SSL_VOLUMES"
    docker run \
        $DOCKER_DAEMON_OPTS \
        --network "$NETWORK_NAME" \
        --name "$NETWORK_NAME-nginx" \
        -v /usr/share/zoneinfo:/usr/share/zoneinfo:ro \
        -v /etc/timezone:/etc/timezone:ro \
        -v "$NGINX_VOLUME/nginx.conf:/etc/nginx/nginx.conf:ro" \
        -v "$NGINX_VOLUME:/etc/nginx/coog/:ro" \
        -v "/tmp/$NETWORK_NAME-nginx:/tmp" \
        $volumes \
        -p "$NGINX_SSL_PUB_PORT:443" \
        -p "$NGINX_PUB_PORT:80" \
        "$NGINX_IMAGE"
}

action() {
    docker "$@" "$NETWORK_NAME-nginx"
}

usage() {
    echo
    echo Available commands
    echo
    echo "  reset     -> reset nginx configuration"
    echo "  edit      -> edit nginx configuration"
    echo "  ssl       -> prepare SSL certificate"
    echo "  run       -> run an nginx docker image"
    echo "  <action>  -> call docker action on server container"
    echo
}

main() {
    source "$COOG_CODE_DIR/config"
    [ -z "$1" ] && usage && return 0
    local cmd; cmd="$1"; shift
    [ "$cmd" = "reset" ] && { ( cd "$COOG_DATA_DIR" && config_data_reset_nginx ); return $?; }
    [ "$cmd" = "edit" ] && { _edit "$@"; return $?; }
    [ "$cmd" = "ssl" ] && { _ssl; return $?; }
    [ "$cmd" = "run" ] && { run; return $?; }
    action "$cmd" "$@"
}

main "$@"
