#!/bin/bash

clone_repo() { # <wd> <repo_name> <repo_uri> <repo_branch>
        [ $# -ne 4 ] && echo bad args >&2 && return 1
        git clone --depth=1 --recursive -b "$4" "$3" "$1/workspace/$2"
        printf "%s:" "$2" >> "$1/workspace/.version"
        (cd "$1/workspace/$2" && git rev-parse HEAD >> "$1/workspace/.version")
}

get_clone_uri() { # <wd> <repo_name>
        cat "$1/repos.vendor" "$1/repos.custom" | grep -P "^$2;" | tail -1 | cut -d ";" -f 2
}

main() { # <image-tag> <repositories> -- [docker-build-arg*]
        [ $# -lt 4 ] && echo "Usage: ./build <image-tag> <repositories...> [docker-build-args]" && \
        echo "<repositories...> must contain at least coog, trytond, trytond-modules" && \
        echo "One repository must be formatted this way: <repo_name>:<branch>" >&2 && return 1

        local script_path; script_path=$(readlink -f "$0")
        local wd; wd=$(dirname "$script_path"); wd="$wd/docker"

        local workspace="$wd/workspace"

        mkdir "$workspace" || return 1

        local image; image="$1"
        shift

        while [ ! -z "$1" ]
        do
                [ "$1" = "--" ] && shift && break

                echo "Working on $1."

                local name; name=$(echo "$1" | cut -d ":" -f 1)
                local branch; branch=$(echo "$1" | cut -d ":" -f 2)
                local uri; uri=$(get_clone_uri "$wd" "$name")

                [ -z "$uri" ] && echo "Unknown repo: $name" >&2 && return 1

                clone_repo "$wd" "$name" "$uri" "$branch" || return 1

                shift
        done

        docker build -t "$image" "$@" "$wd"

        rm -rf "$workspace"
}

main "$@"
