#!/bin/bash

if [ -z "$COOG_CODE_DIR" ] || [ ! -d "$COOG_CODE_DIR" ] || [ -z "$COOG_DATA_DIR" ]
then
    {
        echo "Please make sure that these two env vars are set:"
        echo "  COOG_CODE_DIR: your coog-admin install folder"
        echo "  COOG_DATA_DIR: the folder where to keep your custom config"
    } >&2 && exit 1
fi

server() {
    docker run \
        $DOCKER_DAEMON_OPTS \
        --network "$NETWORK_NAME" \
        --name "$NETWORK_NAME-postgres" \
        -e "POSTGRES_USER=$POSTGRES_USER" \
        -e "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" \
        -e "PGDATA=/var/lib/postgresql/data/pgdata" \
        -v /usr/share/zoneinfo:/usr/share/zoneinfo:ro \
        -v /etc/timezone:/etc/timezone:ro \
        -v "$POSTGRES_VOLUME:/var/lib/postgresql/data" \
        "$POSTGRES_IMAGE" "$@"
}

client() {
    docker run \
        $DOCKER_INTERACTIVE_OPTS \
        --network "$NETWORK_NAME" \
        "$POSTGRES_IMAGE" \
        psql -h "$NETWORK_NAME-postgres" -U "$POSTGRES_USER" "$@"
}

anon_dump() {
    queries=$(./coog anon_queries $@) || { echo $queries; return 1; }
    echo "Creating copy of $COOG_DB_NAME for anonymization, this can take a while"
    docker run \
        $DOCKER_DAEMON_OPTS \
        --network "$NETWORK_NAME" \
        --name "$NETWORK_NAME-postgres-tmp" \
        -e "POSTGRES_USER=$POSTGRES_USER" \
        -e "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" \
        -v /usr/share/zoneinfo:/usr/share/zoneinfo:ro \
        -v /etc/timezone:/etc/timezone:ro \
        "$POSTGRES_IMAGE"

    sleep 5

    anon_db_name=anon_copy_"$COOG_DB_NAME"


    docker run \
        $DOCKER_PIPED_OPTS \
        --network "$NETWORK_NAME" \
        -e PGHOST="$NETWORK_NAME-postgres-tmp" \
        -e PGUSER="$COOG_DB_USER" \
        -e PGPASSWORD="$COOG_DB_PASSWORD" \
        "$POSTGRES_IMAGE" \
        psql --quiet -c "create database $anon_db_name;" > /dev/null 2>&1


    dump | docker run \
        --rm \
        -i \
        --network "$NETWORK_NAME" \
        -e PGHOST="$NETWORK_NAME-postgres-tmp" \
        -e PGUSER="$COOG_DB_USER" \
        -e PGPASSWORD="$COOG_DB_PASSWORD" \
        "$POSTGRES_IMAGE" \
        psql --quiet -d $anon_db_name > /dev/null 2>&1


    echo "Anonymizing copy"
    docker run \
        $DOCKER_PIPED_OPTS \
        --network "$NETWORK_NAME" \
        -e PGHOST="$NETWORK_NAME-postgres-tmp" \
        -e PGUSER="$COOG_DB_USER" \
        -e PGPASSWORD="$COOG_DB_PASSWORD" \
        "$POSTGRES_IMAGE" \
        psql --quiet -d $anon_db_name -c "$queries" > /dev/null 2>&1

    stamp=$(date +%Y-%m-%d_%Hh%M)
    dump_name="$anon_db_name"_"$stamp".dump

    echo "Dumping anonymized copy"
    docker run \
        $DOCKER_PIPED_OPTS \
        --network "$NETWORK_NAME" \
        -e PGHOST="$NETWORK_NAME-postgres-tmp" \
        -e PGUSER="$COOG_DB_USER" \
        -e PGPASSWORD="$COOG_DB_PASSWORD" \
        -v "/tmp:/tmp" \
        "$POSTGRES_IMAGE" \
        pg_dump $anon_db_name -f /tmp/$dump_name > /dev/null 2>&1

    echo "Dropping copy"
    docker run \
        $DOCKER_PIPED_OPTS \
        --network "$NETWORK_NAME" \
        -e PGHOST="$NETWORK_NAME-postgres-tmp" \
        -e PGUSER="$COOG_DB_USER" \
        -e PGPASSWORD="$COOG_DB_PASSWORD" \
        "$POSTGRES_IMAGE" \
        psql -quiet -c "drop database $anon_db_name;" > /dev/null 2>&1

    docker rm -f -v "$NETWORK_NAME-postgres-tmp" > /dev/null 2>&1

    echo "Anonymized copy of $COOG_DB_NAME dumped to /tmp/$dump_name"
}

dump() {
    if [ -z "$COOG_POSTGRES_HOST" ]
    then
        docker run \
            $DOCKER_PIPED_OPTS \
            --network "$NETWORK_NAME" \
            -e PGHOST="$NETWORK_NAME-postgres" \
            -e PGUSER="$COOG_DB_USER" \
            -e PGPASSWORD="$COOG_DB_PASSWORD" \
            -e PGDATABASE="$COOG_DB_NAME" \
            "$POSTGRES_IMAGE" \
            pg_dump "$@"
    else
        docker run \
            $DOCKER_PIPED_OPTS \
            -e PGHOST="$COOG_POSTGRES_HOST" \
            -e PGUSER="$COOG_DB_USER" \
            -e PGPASSWORD="$COOG_DB_PASSWORD" \
            -e PGDATABASE="$COOG_DB_NAME" \
            "$POSTGRES_IMAGE" \
            pg_dump "$@"
    fi
}

action() {
    docker "$@" "$NETWORK_NAME-postgres"
}

usage() {
    echo
    echo Available commands
    echo
    echo "  server    -> runs a postgres docker image as a server"
    echo "  client    -> runs a postgres docker image as a client"
    echo "  dump      -> creates a dump of coog database"
    echo "  anon_dump -> creates a dump file of anonymised coog database: <level>. The database is the one defined in COOG_DB_NAME"
    echo "  <action>  -> calls docker action on server container"
    echo
}

main() {
    source "$COOG_CODE_DIR/config"
    [ ! -z "$PGUSER" ] && COOG_DB_USER="$PGUSER"
    [ ! -z "$PGPASSWORD" ] && COOG_DB_PASSWORD="$PGPASSWORD"
    [ ! -z "$DB_NAME" ] && COOG_DB_NAME="$DB_NAME"
    [ -z "$1" ] && usage && return 0
    local cmd; cmd=$1; shift
    [ "$cmd" = "server" ] && { server "$@"; return $?; }
    [ "$cmd" = "client" ] && { client "$@"; return $?; }
    [ "$cmd" = "dump" ] && { dump "$@"; return $?; }
    [ "$cmd" = "anon_dump" ] && { anon_dump "$@"; return $?; }
    action "$cmd" "$@"
}

main "$@"
